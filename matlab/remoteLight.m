function remoteLight(light_info, device)
% To control a remote device to perform light

% Params
% ----------
% light_info: The light info array with each entry generated by function setLightConfig
% device: The device you wish to operate on. It can be
%     (1) A string indicates the device name
%     (2) An index indicates the device in the table of servC.devices

	current_path = dir([mfilename('fullpath'),'.m']).folder;

	addpath(fullfile(current_path, 'server'));

	global servC;

	default_filepath = fullfile(servC.directory, 'resources', servC.default_audio_name);
	% Convert if needed, and check availability of the assigned device name
	device_name = getDeviceName();

	% Generate a temporary time stamp for instant play
	tms_full_path = generateTimeStampFile();

	% Send ready signal for processing
	ready_res = sendHTTPRequest(servC.uri, 'POST', 'ready', tms_full_path);
	% Send play signal once ready
	play_res = sendHTTPRequest(servC.uri, 'GET', ['start/', num2str(servC.default_wait_time)]);

	% ---------------- %
	% End of execution
	% ---------------- %

	function dname = getDeviceName()
		if isa(device, 'char') || isa(device, 'string')

			if ismember(device, servC.devices.DeviceName)
				dname = device;
			else
				error('No such device named ''%s''.', device);
			end
		else
			dname = servC.devices.DeviceName(device);
		end
	end

	function abs_path = toAbsPath(path_str)
		dirc = dir(path_str);
		if dirc.isdir
			abs_path = dirc.folder;
		else
			abs_path = fullfile(dirc.folder, dirc.name);
		end
	end

	function fullpath = generateTimeStampFile()
		fullpath = fullfile(servC.directory, 'resources', servC.default_tms_name);
		time_stamp = sprintf('# instant light script\n');
		% Load light information
		for script = light_info
			time_stamp = sprintf('%slight 0:00 %s %d %d %d %d %d\n', time_stamp, device_name, script.strip, script.led, script.red, script.green, script.blue);
		end
		writeFile(fullpath, time_stamp);
	end

	function updateArxiv()
		% Read from the current arxiv log
		arxiv_path = fullfile(servC.directory, 'fileArxiv.json');
		arxiv = readFile(arxiv_path);

		% add info if not exist
		if ~ismember(file_name, string(arxiv.fileNames))
			arxiv.fileNumber = arxiv.fileNumber +1;
			arxiv.fileNames{end+1} = file_name;
		end

		% write new fileArxiv
		writeFile(arxiv_path, arxiv);
	end

end % remoteSound